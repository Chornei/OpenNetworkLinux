#!/usr/bin/python
############################################################
#
# ONL Loader Upgrade
#
############################################################
import os
import sys
import fnmatch
from onl.upgrade import ubase

class Loader_Upgrade(ubase.BaseUpgrade):
    name="loader"
    Name="Loader"
    title="Loader Upgrade Check"
    atype="A Loader"

    current_version_key="Current Loader Version"
    next_version_key="Next Loader Version"

    def init_versions(self):
        #
        # Current Loader version file.
        # If this file doesn't exist then in-place upgrade is not supported.
        #
        ETC_LOADER_VERSIONS_JSON = "/etc/onl/loader/versions.json"

        # Upgrade Loader Version file.
        NEXT_LOADER_VERSIONS_JSON = "/etc/onl/upgrade/%s/manifest.json" % self.parch

        self.current_version = self.load_json(ETC_LOADER_VERSIONS_JSON,
                                              "RELEASE_ID",
                                              None)

        self.next_version = self.load_json(NEXT_LOADER_VERSIONS_JSON,
                                           "version", {}).get('RELEASE_ID', None)

    def summarize(self):
        self.logger.info("Current Loader Version: %s" % self.current_version)
        self.logger.info("   Next Loader Version: %s" % self.next_version)
        self.logger.info("")


    def upgrade_notes(self):
        return """
    * A single reboot will be required to complete this upgrade.
"""


class Loader_Upgrade_FIT(Loader_Upgrade):

    def do_upgrade(self, forced=False):

        FIT_UPGRADE_IMAGE_PLATFORM="/etc/onl/upgrade/%s/%s.itb" % (self.parch, self.platform.platform())
        FIT_UPGRADE_IMAGE_ALL="/etc/onl/upgrade/%s/onl-loader-fit.itb" % (self.parch)
        FIT_LOADER_IMAGE_NAME="%s.itb" % self.platform.platform()

        fit_image = None

        if os.path.exists(FIT_UPGRADE_IMAGE_PLATFORM):
            fit_image = FIT_UPGRADE_IMAGE_PLATFORM
        elif os.path.exists(FIT_UPGRADE_IMAGE_ALL):
            fit_image = FIT_UPGRADE_IMAGE_ALL
        else:
            self.abort("The FIT upgrade image is missing. Upgrade cannot continue.")

        #
        # The platform configuration file will describe which partition
        # and which format should be used to store the FIT image.
        #
        partition = None
        raw = False
        pc = self.platform.platform_config

        if pc:
            if 'loader' in pc and pc['loader']:
                if 'partition' in pc['loader']:
                    partition = pc['loader']['partition']
                else:
                    self.abort("No partition listed in the loader section of the platform configuration.")
                raw = pc['loader'].get('raw', False)
            else:
                self.abort("No loader section listed in the platform configuration.")
        else:
            self.abort("No platform configuration.")

        if raw:
            #
            # The loader file is written raw to the given partition.
            #
            print "Writing %s to %s..." % (fit_image, partition)
            if os.system("dd of=%s if=%s" % (partition, fit_image)) != 0:
                self.abort("Failure writing loader data to partition %s." % (partition))

        else:
            #
            # Mount the loader partition and rewrite the loader image.
            #
            mdir="/mnt/upgrade/loader"
            self.mount(mdir, partition=partition)
            self.copyfile(fit_image, os.path.join(mdir, FIT_LOADER_IMAGE_NAME))
            self.umount(mdir)

        self.reboot()


class Loader_Upgrade_x86_64(Loader_Upgrade):

    def do_upgrade(self, forced=False):

        X86_64_UPGRADE_DIR="/etc/onl/upgrade/%s/" % (self.parch)
        X86_64_UPGRADE_PATTERNS = [ "kernel-*", "initrd-*" ]

        #
        # Mount the ONL-BOOT partition
        #
        mdir="/mnt/onl-boot"
        self.mount(mdir, label="ONL-BOOT")

        for f in os.listdir(X86_64_UPGRADE_DIR):
            for pattern in X86_64_UPGRADE_PATTERNS:
                if fnmatch.fnmatch(f, pattern):
                    self.copyfile(os.path.join(X86_64_UPGRADE_DIR, f), os.path.join(mdir, f))

        src = "/lib/platform-config/current/onl/boot/grub.cfg"
        dst = os.path.join(mdir, "grub/grub.cfg")
        if os.path.exists(src):
            self.copyfile(src, dst)

        self.umount(mdir)
        self.reboot()





if __name__ == '__main__':
    import platform

    arch = platform.machine()
    klass = None

    if arch in [ 'ppc', 'armv7l' ]:
        klass = Loader_Upgrade_FIT
    elif arch == 'x86_64':
        klass = Loader_Upgrade_x86_64
    else:
        sys.stderr.write("Loader Upgrade: The current architecture (%s) is not supported for upgrade.\n" % arch)

    if klass:
        klass().main()
